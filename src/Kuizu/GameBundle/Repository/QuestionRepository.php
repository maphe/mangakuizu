<?php

namespace Kuizu\GameBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Kuizu\GameBundle\Entity\Manga;
use Kuizu\UserBundle\Entity\User;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends EntityRepository
{
    /**
     * @param int $id
     * @return Question
     */
    public function find($id)
    {
        return $this->createQueryBuilder('q')
            ->select('q', 'm')
            ->join('q.manga', 'm')
            ->where('q.id = :qid')
            ->setParameter('qid', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Manga $manga
     * @return int
     */
    public function countByManga(Manga $manga = null)
    {
        $qb = $this->createQueryBuilder('q')
            ->select('count(q.id)');

        if (null !== $manga) {
            $qb
                ->where('q.manga = :mid')
                ->setParameter('mid', $manga->getId());
        }

        $count = $qb
            ->getQuery()
            ->getSingleScalarResult();

        return (int) $count;
    }

    /**
     * @param Manga $manga
     * @param array $excludedIds
     * @return mixed
     */
    public function findOneRandomlyByManga(Manga $manga = null, array $excludedIds = [])
    {
        $count = $this->countByManga($manga) - count($excludedIds);

        $qb = $this->createQueryBuilder('q')
            ->select('q')
            ->join('q.manga', 'm');

        if (null !== $manga) {
            $qb
                ->where('q.manga = :mid')
                ->setParameter('mid', $manga->getId());
        }

        if ($excludedIds) {
            $qb
                ->andWhere('q.id NOT IN (:excludedIds)')
                ->setParameter('excludedIds', $excludedIds);
        }

        return $qb
            ->setFirstResult(rand(0, $count-1))
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param User $author
     * @return int
     */
    public function countByAuthor(User $author)
    {
        $count = $this->createQueryBuilder('q')
            ->select('count(q.id)')
            ->where('q.author = :uid')
            ->setParameter('uid', $author->getId())
            ->getQuery()
            ->getSingleScalarResult();

        return (int) $count;
    }
}
